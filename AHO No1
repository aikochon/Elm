module Main exposing (main)

import Browser
import Html exposing (Html, button, div, text)
import Html.Events exposing (onClick)
import List exposing (..)
import List.Split exposing (chunksOfLeft, chunksOfRight)
import String exposing (..)


type alias Model =
    { count : Int }


initialModel : Model
initialModel =
    { count = 0 }


type Msg
    = Increment
    | Decrement


update : Msg -> Model -> Model
update msg model =
    case msg of
        Increment ->
            { model | count = model.count + 1 }

        Decrement ->
            { model | count = model.count - 1 }


splitToList : Int -> List Char
splitToList split =
    String.fromInt split
        |> String.toList


view : Model -> Html Msg
view model =
    let
        print n =
            if modBy 3 n == 0 then
                "AHO"

            else if List.member '3' (splitToList n) then
                "AHO"

            else
                String.fromInt n
    in
    div []
        [ button [ onClick Increment ] [ text "+1" ]
        , div [] [ text <| print model.count ]

        --, div [] [ text <| String.fromInt model.count ]
        , button [ onClick Decrement ] [ text "-1" ]
        ]


main : Program () Model Msg
main =
    Browser.sandbox
        { init = initialModel
        , view = view
        , update = update
        }
